// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	event "github.com/jperdior/recordari-kit/event"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

// AggregateID provides a mock function with given fields:
func (_m *Event) AggregateID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AggregateID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Event) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OccurredOn provides a mock function with given fields:
func (_m *Event) OccurredOn() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OccurredOn")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ToDTO provides a mock function with given fields:
func (_m *Event) ToDTO() event.EventDTO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToDTO")
	}

	var r0 event.EventDTO
	if rf, ok := ret.Get(0).(func() event.EventDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.EventDTO)
		}
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Event) Type() event.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 event.Type
	if rf, ok := ret.Get(0).(func() event.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(event.Type)
	}

	return r0
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
